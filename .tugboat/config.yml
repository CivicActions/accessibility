services:
  # What to call the service hosting the site. Because there is only
  # one service, it is automatically set as the default service, which
  # does a few things
  #   1. Clones the git repository into the service container
  #   2. Exposes port 80 to the Tugboat HTTP proxy
  #   3. Routes requests to the preview URL to this service
  apache:
    # Use the available version of Apache by not specifying a version
    image: tugboatqa/php:apache

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        # Check for updates to apt-get, and then use it to install Ruby
        - apt-get update
        - apt-get install ruby ruby-dev

        # Install Jekyll
        - gem install jekyll bundler

        # Clean up apt artifacts to keep the Preview small
        - apt-get clean
        - rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

        # Turn on URL rewriting.
        - a2enmod rewrite

      build:
        # Check for updates to Jekyll
        - bundle update

        # Use the `jekyll build` command to build your static site
        - bundle exec jekyll build

        # Link the document root to the expected path. This example links the
        # /public directory generated by the Jekyll build to the docroot
        - ln -snf "${TUGBOAT_ROOT}"/_site "${DOCROOT}"

        # Find and replace the main site domain.
        - cd "${TUGBOAT_ROOT}"/_site
        - grep -RiIl "accessibility\.civicactions\.com" | xargs sed -i 's/accessibility\.civicactions\.com/${TUGBOAT_PREVIEW_REF}-${TUGBOAT_SERVICE_TOKEN}\.tugboatqa\.com/g'

        # Inject .htaccess file to mimic GitHub pages behavior with URLs.
        - echo "RewriteEngine On" >> .htaccess
        - echo "RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI}.html -f" >> .htaccess
        - echo "RewriteRule "'!'"\.\w{2,4}$ %{REQUEST_URI}.html [L]" >> .htaccess
